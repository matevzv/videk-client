#!/usr/bin/env python

import re
import sys
import json
import time
import socket
import subprocess
import netifaces as ni
from datetime import datetime
from videkrestclient import Videk

videk_api_key = open('/etc/videk/api.key').readline().strip()
videk = Videk("https://videk.ijs.si", videk_api_key)

current_ip = None
machine_id = open('/etc/machine-id').readline().strip()

conf = {}
with open('/etc/videk/conf') as confile:
    for line in confile:
        name, var = line.partition("=")[::2]
        conf[name.strip()] = var.strip()

if videk.serverOnline():
    print "Videk server is online ..."
else:
    print "Videk server is offline ..."
    sys.exit(1)

def uploadSensors(node_id, sensor_type, sensors):
    for sensor in sensors:
        sensor_id = videk.getSensorID(node, sensor_type, sensor['name'])
        if sensor_id == None:
            videk.createSensor(node_id, sensor_type, sensor['name'],
                sensor['unit'])
            sensor_id = videk.getSensorID(node, sensor_type, sensor['name'])

        measurement = '''{"latitude":"","longitude":"","ts":"","value":""}'''
        v = sensor['value']
        preparedData = []
        data = json.loads(measurement)
        data['value'] = v
        data['ts'] = datetime.utcnow().isoformat()
        data['latitude'] = lat
        data['longitude'] = lon
        preparedData.append(data)

        videk.uploadMesurements(preparedData, node_id, sensor_id)

def init(videk, current_ip):
    global conf
    global machine_id

    node = socket.gethostname()
    cluster = node[:node.rfind("-")]
    lat = 46.042767
    lon = 14.487632
    mac = open('/sys/class/net/'+conf['if']+'/address').read().strip()
    sw_version = "v1.0"

    videk.latitude = lat
    videk.longitude = lon

    node_ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', node.replace("-", "."))[0]

    if current_ip != node_ip:
        print "reseting sna-lgtc-boot and munin services ..."
        subprocess.call(["systemctl", "restart", "sna-lgtc-boot"])
        subprocess.call(["systemctl", "restart", "munin-node"])
        node = socket.gethostname()
        cluster = node[:node.rfind("-")]

    node_model_x = videk.getNode(node)
    if node_model_x and node_model_x['machine_id'] != machine_id:
        videk.updateSingleNodeParam(node_model_x['id'], "name", "tmp-"+node_model_x['machine_id'])
        videk.updateSingleNodeParam(node_model_x['id'], "status", "inactive")

    cluster_id = videk.getClusterID(cluster)
    if cluster_id == None:
        videk.createCluster(cluster)
        cluster_id = videk.getClusterID(cluster)

    node_id_by_node_name = videk.getNode(node)
    node_id_by_node_machine_id = videk.getNodeByHardwareId(machine_id);
    node_model_update = {}

    if node_id_by_node_name == None and node_id_by_node_machine_id == None:
        videk.createNode(node, cluster_id)
        node_id = videk.getNodeID(node)
        videk.updateSingleNodeParam(node_id, "machine_id", machine_id)
        videk.addNodeExtraField(node, "MAC", mac)
        videk.addNodeExtraField(node, "Software", sw_version)
        node_model = videk.getNode(node)
    elif node_id_by_node_name == None and node_id_by_node_machine_id != None:
        node_model = videk.getNodeByHardwareId(machine_id)
        if node_model['name'] != node:
            node_model['name'] = node
            node_model_update['name'] = node
            print "updated node name"
        if node_model['cluster'] != cluster:
            node_model['cluster'] = cluster
            node_model['cluster_name'] = cluster
            node_model_update['cluster'] = cluster
            node_model_update['cluster_name'] = cluster
            print "updated node cluster"
    elif node_id_by_node_name != None and node_id_by_node_machine_id == None:
        node_model = node_id_by_node_name
        if node_model['machine_id'] != machine_id:
            node_model['machine_id'] = machine_id
            node_model_update['machine_id'] = machine_id
            print "updated node machine_id"
    else:
        node_model = node_id_by_node_name

    if node_model['status'] != 'active':
        node_model_update['status'] = 'active'

    extra_fields = {}
    update = False
    mac_exists = False
    sw_exists = False
    extra_fields['extra_fields'] = []

    if type(node_model['extra_fields']) != list:
        node_model['extra_fields'] = [node_model['extra_fields']]
        update = True

    for extra_field in node_model['extra_fields']:
        if 'Software' in extra_field:
            sw_exists = True
            if extra_field['Software'] != sw_version:
                extra_fields['extra_fields'].append({'Software':sw_version})
                update = True
                continue
        elif 'MAC' in extra_field:
            mac_exists = True
            if extra_field['MAC'] != mac:
                extra_fields['extra_fields'].append({'MAC':mac})
                update = True
                continue
        extra_fields['extra_fields'].append(extra_field)

    if not mac_exists:
        extra_fields['extra_fields'].append({'MAC':mac})
        update = True

    if not sw_exists:
        extra_fields['extra_fields'].append({'Software':sw_version})
        update = True

    if update:
        node_model_update['extra_fields'] = extra_fields['extra_fields']

    if len(node_model_update) != 0:
        videk.updateNode(node_model['id'], node_model_update)
        print "updated node model"

    if lat != float(node_model['loc_lat']) or lon != float(node_model['loc_lon']):
        lat = node_model['loc_lat']
        lon = node_model['loc_lon']
        print "updated node location"

while True:
    current_ip = None
    try:
        current_ip = ni.ifaddresses(conf['if'])[ni.AF_INET][0]['addr']
    except:
        pass
    if current_ip:
        node_model = videk.getNodeByHardwareId(machine_id)
        if node_model:
            node_name = node_model['name']
            videk_ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', node_name.replace("-", "."))
            if videk_ip:
                videk_ip = videk_ip[0]
            if current_ip != videk_ip:
                init(videk, current_ip)
        else:
            init(videk, current_ip)

    time.sleep(10*60)
