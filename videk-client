#!/usr/bin/env python3

import os
import re
import sys
import json
import time
import socket
import subprocess
import netifaces as ni
from datetime import datetime
from videkrestclient import Videk

def getserial():
    cpuserial = "0000000000000000"
    try:
        f = open('/proc/cpuinfo','r')
        for line in f:
            if line[0:6]=='Serial':
                cpuserial = line[10:26]
        f.close()
    except:
        cpuserial = "ERROR000000000"
 
    return cpuserial

conf = {}
with open('/etc/videk/conf') as confile:
    for line in confile:
        name, var = line.partition("=")[::2]
        conf[name.strip()] = var.strip()

videk_api_key = conf['key']
videk = Videk(conf['api'], videk_api_key)

current_ip = None

if conf['id'] == "rpi-serial":
    machine_id = getserial()
else:
    machine_id = open('/etc/machine-id').readline().strip()

if "sys" in conf:
    sys = conf['sys']

if "info" in conf:
    info = conf['info']
else:
    info = "example.com"

if "ebottle" in sys:
    tag_file = "/tmp/ebottle/tags"
    tag_file_last_modified = 0
    ebottle_cluster = sys
    ebottle = True
else:
    ebottle = False

if videk.serverOnline():
    print("Videk server is online ...")
else:
    print("Videk server is offline ...")
    sys.exit(1)

lat = 46.042767
lon = 14.487632

def uploadSensors(node, node_id, sensor_type, sensors):
    for sensor in sensors:
        sensor_id = videk.getSensorID(node, sensor_type, sensor['name'])
        if sensor_id == None:
            videk.createSensor(node_id, sensor_type, sensor['name'],
                sensor['unit'])
            sensor_id = videk.getSensorID(node, sensor_type, sensor['name'])

        if 'ts' in sensor.keys():
            ts = sensor['ts']
        else:
            ts = datetime.utcnow().isoformat()

        measurement = '''{"latitude":"","longitude":"","ts":"","value":""}'''
        v = sensor['value']
        preparedData = []
        data = json.loads(measurement)
        data['value'] = v
        data['ts'] = ts
        data['latitude'] = lat
        data['longitude'] = lon
        preparedData.append(data)

        videk.uploadMesurements(preparedData, node_id, sensor_id)

def prepareSensors(tag, gw_id):
    sensors = [{'name': "gateway", 'value': gw_id, 'unit':""}]

    for name, value in tag.items():
        sensor = {}
        sensor['name'] = name
        sensor['value'] = value

        if 'temperature' in name:
            sensor['unit'] = "C"
        elif 'battery' in name:
            sensor['unit'] = "%"
        elif 'luminance' in name:
            sensor['unit'] = "lm"
        elif 'position' in name:
            sensor['unit'] = "G"
            sensor['value'] = str(value)
        
        sensors.append(sensor)

    return sensors

def manageTags(gw_id):
    global tag_file_last_modified
    
    gw_tags = []
    leds = []
    
    tag_file_exists = os.path.isfile(tag_file)

    if tag_file_exists:
        tag_file_modified = os.path.getmtime(tag_file)

        if tag_file_modified != tag_file_last_modified:
            tag_file_last_modified = tag_file_modified
            t = open(tag_file)
            tags = json.load(t)
        else:
            return None
    else:
        return None
            
    cluster_id = videk.getClusterID(ebottle_cluster)
    if cluster_id == None:
        videk.createCluster(ebottle_cluster, "ble")
        cluster_id = videk.getClusterID(ebottle_cluster)

    for tag in tags:
        tag_mac = tag['mac']
        tag_model = videk.getNode(tag_mac)

        if tag_model == None:
            videk.createNode(tag_mac, cluster_id)
            videk.addNodeExtraField(tag_mac, "LEDs", "0")
            videk.addNodeExtraField(tag_mac, "URL", info)
            tag_model = videk.getNode(tag_mac)

        tag_id = int(tag_model['id'])
        gw_tags.append(tag_mac)
        sensors = tag
        sensors.pop("mac")
        sensors = prepareSensors(sensors, gw_id)
        uploadSensors(tag_mac, tag_id, tag_mac, sensors)

        for extra_field in tag_model['extra_fields']:
            if 'LEDs' in extra_field:
                leds.append({"mac": tag_mac, "leds": extra_field['LEDs'] })

    f = open("/tmp/ebottle/leds", "w")
    f.write(json.dumps(leds) + '\n')
    f.close()

    return gw_tags

def readPipe(_pipe):
    FIFO = _pipe
    data = ""

    try:
        with open(FIFO) as fifo:
            data = fifo.readlines()

    except:
        pass

    return data

def manageGrideye(gw_name, gw_id):
    sensors = []

    events = readPipe("/tmp/ebottle/grideye_events")

    for event in events:
        event = event.strip().split(" ")
        ts = int(float(event[0]))
        sensor = {'name': "grideye_events", 'ts': datetime.utcfromtimestamp(ts).isoformat(), 'value': event[1], 'unit':""}
        sensors.append(sensor)

    uploadSensors(gw_name, gw_id, "ebottle", sensors)

def init(videk, current_ip):
    global conf
    global machine_id
    global lat
    global lon

    node = socket.gethostname()
    cluster = node[:node.rfind("-")]
    mac = open('/sys/class/net/'+conf['if']+'/address').read().strip()
    sw_version = "v1.0"

    videk.latitude = lat
    videk.longitude = lon

    node_ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', node.replace("-", "."))

    if node_ip:
        node_ip = node_ip[0]

    if current_ip != node_ip:
        print("reseting hostname and munin services ...")
        subprocess.call(["set-hostname"])
        subprocess.call(["systemctl", "restart", "munin-node"])
        node = socket.gethostname()
        
        cluster = node[:node.rfind("-")]

    node_model_x = videk.getNode(node)
    if node_model_x and node_model_x['machine_id'] != machine_id:
        videk.updateSingleNodeParam(node_model_x['id'], "name", "tmp-"+node_model_x['machine_id'])
        videk.updateSingleNodeParam(node_model_x['id'], "status", "inactive")

    cluster_id = videk.getClusterID(cluster)
    if cluster_id == None:
        videk.createCluster(cluster, "ssh")
        cluster_id = videk.getClusterID(cluster)

    node_id_by_node_name = videk.getNode(node)
    node_id_by_node_machine_id = videk.getNodeByHardwareId(machine_id)
    node_model_update = {}

    if node_id_by_node_name == None and node_id_by_node_machine_id == None:
        videk.createNode(node, cluster_id)
        node_id = videk.getNodeID(node)
        videk.updateSingleNodeParam(node_id, "machine_id", machine_id)
        if mac: videk.addNodeExtraField(node, "MAC", mac)
        videk.addNodeExtraField(node, "Software", sw_version)
        node_model = videk.getNode(node)
    elif node_id_by_node_name == None and node_id_by_node_machine_id != None:
        node_model = videk.getNodeByHardwareId(machine_id)
        if node_model['name'] != node:
            node_model['name'] = node
            node_model_update['name'] = node
            print("updated node name")
        if node_model['cluster'] != cluster:
            node_model['cluster'] = cluster
            node_model['cluster_name'] = cluster
            node_model_update['cluster'] = cluster
            node_model_update['cluster_name'] = cluster
            print("updated node cluster")
    elif node_id_by_node_name != None and node_id_by_node_machine_id == None:
        node_model = node_id_by_node_name
        if node_model['machine_id'] != machine_id:
            node_model['machine_id'] = machine_id
            node_model_update['machine_id'] = machine_id
            print("updated node machine_id")
    else:
        node_model = node_id_by_node_name

    if node_model['status'] != 'active':
        node_model_update['status'] = 'active'

    extra_fields = {}
    update = False
    mac_exists = False
    sw_exists = False
    extra_fields['extra_fields'] = []

    if type(node_model['extra_fields']) != list:
        node_model['extra_fields'] = [node_model['extra_fields']]
        update = True

    for extra_field in node_model['extra_fields']:
        if 'Software' in extra_field:
            sw_exists = True
            if extra_field['Software'] != sw_version:
                extra_fields['extra_fields'].append({'Software':sw_version})
                update = True
                continue
        elif 'MAC' in extra_field:
            mac_exists = True
            if extra_field['MAC'] != mac:
                if mac: extra_fields['extra_fields'].append({'MAC':mac})
                update = True
                continue
        extra_fields['extra_fields'].append(extra_field)

    if not mac_exists:
        if mac: extra_fields['extra_fields'].append({'MAC':mac})
        update = True

    if not sw_exists:
        extra_fields['extra_fields'].append({'Software':sw_version})
        update = True

    if update:
        node_model_update['extra_fields'] = extra_fields['extra_fields']

    if len(node_model_update) != 0:
        videk.updateNode(node_model['id'], node_model_update)
        print("updated node model")

    if lat != float(node_model['loc_lat']) or lon != float(node_model['loc_lon']):
        lat = node_model['loc_lat']
        lon = node_model['loc_lon']
        print("updated node location")

    if ebottle:
        manageGrideye(node_model['name'], node_model['id'])
        tags = manageTags(node_model['machine_id'])

        if tags is not None:
            tags = [{'name': 'tags', 'value': str(tags), 'unit': ''}]
            uploadSensors(node_model['name'], node_model['id'], "ebotle", tags)


while True:
    current_ip = None
    try:
        current_ip = ni.ifaddresses(conf['if'])[ni.AF_INET][0]['addr']
    except:
        pass
    if current_ip:
        node_model = videk.getNodeByHardwareId(machine_id)
        if node_model:
            node_name = node_model['name']
            videk_ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', node_name.replace("-", "."))
            if videk_ip:
                videk_ip = videk_ip[0]
            if current_ip != videk_ip:
                init(videk, current_ip)
            elif ebottle:
                manageGrideye(node_model['name'], node_model['id'])
                tags = manageTags(node_model['machine_id'])

                if tags is not None:
                    tags = [{'name': 'tags', 'value': str(tags), 'unit': ''}]
                    uploadSensors(node_model['name'], node_model['id'], "ebotle", tags)
        else:
            init(videk, current_ip)

    time.sleep(10*60)
